{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The WLCG Virtual Organization An instance of IAM has been deployed in support of WLCG development and integration activities in support of the migration to token-based authentication and authorization. The WLCG IAM instance is integrated with CERN SSO. Registration is active. IAM documentation is available here . Clients applications can be registered following these instructions , or using oidc-agent . VOMS support is enabled. To link an X.509 certificate to an existing IAM WLCG account, follow these instructions . As in VOMS, multiple certificates can be linked to an account. WLCG VO VOMS configuration VOMSES LSC To have a working VOMS configuration for the WLCG VO: place the lsc file in the /etc/grid-security/vomsdir/wlcg directory place the vomses file in the /etc/vomses directory (only needed if you need to do voms-proxy-init ) The latest supported VOMS clients are required (i.e., voms-proxy-init v. >=3 ). Also note that this VO is supported by IAM, i.e. there are no VOMS Admin endpoints that can be used to generate Gridmap files. Example $ voms-proxy-init -voms wlcg Enter GRID pass phrase for this identity: Contacting wlcg-voms.cloud.cnaf.infn.it:15001 [/DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=voms-wlcg.cloud.cnaf.infn.it] \"wlcg\"... Remote VOMS server contacted succesfully. Created proxy in /tmp/x509up_u501. Your proxy is valid until Thu Jan 30 03:47:58 CET 2020 $ voms-proxy-info -all subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it/CN=743668640 issuer : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it identity : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it type : RFC3820 compliant impersonation proxy strength : 1024 path : /tmp/x509up_u501 timeleft : 11:59:55 key usage : Digital Signature, Key Encipherment, Data Encipherment === VO wlcg extension information === VO : wlcg subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it issuer : /DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=wlcg-voms.cloud.cnaf.infn.it attribute : /wlcg attribute : /wlcg/xfers timeleft : 11:59:55 uri : wlcg-voms.cloud.cnaf.infn.it:15001","title":"The WLCG Virtual Organization"},{"location":"#the-wlcg-virtual-organization","text":"An instance of IAM has been deployed in support of WLCG development and integration activities in support of the migration to token-based authentication and authorization. The WLCG IAM instance is integrated with CERN SSO. Registration is active. IAM documentation is available here . Clients applications can be registered following these instructions , or using oidc-agent . VOMS support is enabled. To link an X.509 certificate to an existing IAM WLCG account, follow these instructions . As in VOMS, multiple certificates can be linked to an account.","title":"The WLCG Virtual Organization"},{"location":"#wlcg-vo-voms-configuration","text":"VOMSES LSC To have a working VOMS configuration for the WLCG VO: place the lsc file in the /etc/grid-security/vomsdir/wlcg directory place the vomses file in the /etc/vomses directory (only needed if you need to do voms-proxy-init ) The latest supported VOMS clients are required (i.e., voms-proxy-init v. >=3 ). Also note that this VO is supported by IAM, i.e. there are no VOMS Admin endpoints that can be used to generate Gridmap files.","title":"WLCG VO VOMS configuration"},{"location":"#example","text":"$ voms-proxy-init -voms wlcg Enter GRID pass phrase for this identity: Contacting wlcg-voms.cloud.cnaf.infn.it:15001 [/DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=voms-wlcg.cloud.cnaf.infn.it] \"wlcg\"... Remote VOMS server contacted succesfully. Created proxy in /tmp/x509up_u501. Your proxy is valid until Thu Jan 30 03:47:58 CET 2020 $ voms-proxy-info -all subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it/CN=743668640 issuer : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it identity : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it type : RFC3820 compliant impersonation proxy strength : 1024 path : /tmp/x509up_u501 timeleft : 11:59:55 key usage : Digital Signature, Key Encipherment, Data Encipherment === VO wlcg extension information === VO : wlcg subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it issuer : /DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=wlcg-voms.cloud.cnaf.infn.it attribute : /wlcg attribute : /wlcg/xfers timeleft : 11:59:55 uri : wlcg-voms.cloud.cnaf.infn.it:15001","title":"Example"},{"location":"token-based-authorization/","text":"Token-based authorization Getting an account on the wlcg IAM instance To register in the WLCG IAM instance, point your browser to the wlcg IAM VO page . If you have a CERN account, use that account to login to the wlcg VO. Registering a client in the WLCG IAM instance The recommended way of registering a client in the WLCG IAM instance is to use oidc-agent as described here . By default, clients registered in the WLCG IAM instance will use the common WLCG JWT profile . WLCG IAM scope policy configuration IAM allows to define policies to limit access to scopes only to selected classes of users. In the IAM wlcg instance policies are defined to limit access to compute.* and storage.* scopes, which are the scopes defined in the WLCG JWT profile to control access to compute and storage resources. In more detail: access to the compute.create , compute.read , compute.cancel , compute.modify scope is only granted to members of the wlcg/pilots group; access to the storage.read , storage.modify , storage.create scopes is only granted to members of the wlcg/xfers group. Membership in those groups can be requested, after registration, from the IAM dashboard. Getting tokens out IAM Scope-based authorization In order to transfer data across WLCG storage elements using scope-based authorization, request a token with the 'storage.read:/' and 'storage.modify:/' scopes, as follows: $ AT=$(oidc-token -s storage.read:/ -s storage.modify:/ wlcg) You can use the jwt utility to inspect the token contents: $ echo $AT | jwt ... \u273b Payload { \"wlcg.ver\": \"1.0\", \"sub\": \"a1b98335-9649-4fb0-961d-5a49ce108d49\", \"aud\": \"https://wlcg.cern.ch/jwt/v1/any\", \"nbf\": 1593004542, \"scope\": \"storage.read:/ storage.modify:/\", \"iss\": \"https://wlcg.cloud.cnaf.infn.it/\", \"exp\": 1593008142, \"iat\": 1593004542, \"jti\": \"da0a2f89-3cbf-42a7-9403-0b43d814551d\", \"client_id\": \"edfacfb1-f59d-44d0-9eb6-a745ac52f462\" } or directly decode token payload with echo $AT | sed 's/.*\\.\\(.*\\)\\..*/\\1==/' | base64 -d | jq Then you can use davix or curl to access WLCG storage: $ davix-ls -l --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://xfer.cr.cnaf.infn.it:8443/wlcg/ drwxrwxrwx 0 0 2020-06-24 10:41:13 wlcgdoma -rwxrwxrwx 0 1048576 2020-06-18 11:16:25 1M drwxrwxrwx 0 0 2020-04-08 14:56:56 https drwxrwxrwx 0 0 2020-06-24 15:18:36 test-andrea $ davix-put --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" /etc/services https://prometheus.desy.de:2443/VOs/wlcg/file1 $ davix-get --capath /etc/grid-security/certificates https://prometheus.desy.de:2443/VOs/wlcg/file1 /tmp/x Performing Read operation on: http://[2001:638:700:1005:0:0:1:95]:21881/VOs/wlcg/file1?dcache-http-uuid=679aa9a4-b946-49fd-8522-156d165425c5 [==================================] 100% 654KiB/654KiB 0B/s $ davix-mkdir --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 $ davix-cp --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" --copy-mode pull https://prometheus.desy.de:2443/VOs/wlcg/file1 https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1.pull $ davix-cp --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" --copy-mode pull https://prometheus.desy.de:2443/VOs/wlcg/file1 https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1.push $ davix-rm --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 # Create directory $ curl --capath /etc/grid-security/certificates -X MKCOL -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 # Upload file $ curl --capath /etc/grid-security/certificates -L -X PUT -H \"Authorization: Bearer ${AT}\" --upload-file /etc/services https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # Download file $ curl --capath /etc/grid-security/certificates -L -X GET -H \"Authorization: Bearer ${AT}\" --output /tmp/x https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # TPC pull $ curl --capath /etc/grid-security/certificates -L -X COPY -H 'Credentials: none' -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" -H \"Source: https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file2 # TPC push $ curl --capath /etc/grid-security/certificates -L -X COPY -H 'Credentials: none' -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" -H \"Destination: https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file3\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # Delete $ curl --capath /etc/grid-security/certificates -L -X DELETE -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 Gfal python API can be also used with tokens, e.g. import os import gfal2 ctx = gfal2.creat_context() cred = gfal2.cred_new(\"BEARER\", os.getenv('TOKEN')) gfal2.cred_set(ctx, 'amnesiac.cloud.cnaf.infn.it', cred) ctx.stat('https://amnesiac.cloud.cnaf.infn.it:8443/wlcg/wlcgdoma/https/jwttest/1M') Group-based authorization TBD","title":"Token-based authorization"},{"location":"token-based-authorization/#token-based-authorization","text":"","title":"Token-based authorization"},{"location":"token-based-authorization/#getting-an-account-on-the-wlcg-iam-instance","text":"To register in the WLCG IAM instance, point your browser to the wlcg IAM VO page . If you have a CERN account, use that account to login to the wlcg VO.","title":"Getting an account on the wlcg IAM instance"},{"location":"token-based-authorization/#registering-a-client-in-the-wlcg-iam-instance","text":"The recommended way of registering a client in the WLCG IAM instance is to use oidc-agent as described here . By default, clients registered in the WLCG IAM instance will use the common WLCG JWT profile .","title":"Registering a client in the WLCG IAM instance"},{"location":"token-based-authorization/#wlcg-iam-scope-policy-configuration","text":"IAM allows to define policies to limit access to scopes only to selected classes of users. In the IAM wlcg instance policies are defined to limit access to compute.* and storage.* scopes, which are the scopes defined in the WLCG JWT profile to control access to compute and storage resources. In more detail: access to the compute.create , compute.read , compute.cancel , compute.modify scope is only granted to members of the wlcg/pilots group; access to the storage.read , storage.modify , storage.create scopes is only granted to members of the wlcg/xfers group. Membership in those groups can be requested, after registration, from the IAM dashboard.","title":"WLCG IAM scope policy configuration"},{"location":"token-based-authorization/#getting-tokens-out-iam","text":"","title":"Getting tokens out IAM"},{"location":"token-based-authorization/#scope-based-authorization","text":"In order to transfer data across WLCG storage elements using scope-based authorization, request a token with the 'storage.read:/' and 'storage.modify:/' scopes, as follows: $ AT=$(oidc-token -s storage.read:/ -s storage.modify:/ wlcg) You can use the jwt utility to inspect the token contents: $ echo $AT | jwt ... \u273b Payload { \"wlcg.ver\": \"1.0\", \"sub\": \"a1b98335-9649-4fb0-961d-5a49ce108d49\", \"aud\": \"https://wlcg.cern.ch/jwt/v1/any\", \"nbf\": 1593004542, \"scope\": \"storage.read:/ storage.modify:/\", \"iss\": \"https://wlcg.cloud.cnaf.infn.it/\", \"exp\": 1593008142, \"iat\": 1593004542, \"jti\": \"da0a2f89-3cbf-42a7-9403-0b43d814551d\", \"client_id\": \"edfacfb1-f59d-44d0-9eb6-a745ac52f462\" } or directly decode token payload with echo $AT | sed 's/.*\\.\\(.*\\)\\..*/\\1==/' | base64 -d | jq Then you can use davix or curl to access WLCG storage: $ davix-ls -l --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://xfer.cr.cnaf.infn.it:8443/wlcg/ drwxrwxrwx 0 0 2020-06-24 10:41:13 wlcgdoma -rwxrwxrwx 0 1048576 2020-06-18 11:16:25 1M drwxrwxrwx 0 0 2020-04-08 14:56:56 https drwxrwxrwx 0 0 2020-06-24 15:18:36 test-andrea $ davix-put --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" /etc/services https://prometheus.desy.de:2443/VOs/wlcg/file1 $ davix-get --capath /etc/grid-security/certificates https://prometheus.desy.de:2443/VOs/wlcg/file1 /tmp/x Performing Read operation on: http://[2001:638:700:1005:0:0:1:95]:21881/VOs/wlcg/file1?dcache-http-uuid=679aa9a4-b946-49fd-8522-156d165425c5 [==================================] 100% 654KiB/654KiB 0B/s $ davix-mkdir --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 $ davix-cp --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" --copy-mode pull https://prometheus.desy.de:2443/VOs/wlcg/file1 https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1.pull $ davix-cp --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" --copy-mode pull https://prometheus.desy.de:2443/VOs/wlcg/file1 https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1.push $ davix-rm --capath /etc/grid-security/certificates -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 # Create directory $ curl --capath /etc/grid-security/certificates -X MKCOL -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 # Upload file $ curl --capath /etc/grid-security/certificates -L -X PUT -H \"Authorization: Bearer ${AT}\" --upload-file /etc/services https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # Download file $ curl --capath /etc/grid-security/certificates -L -X GET -H \"Authorization: Bearer ${AT}\" --output /tmp/x https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # TPC pull $ curl --capath /etc/grid-security/certificates -L -X COPY -H 'Credentials: none' -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" -H \"Source: https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file2 # TPC push $ curl --capath /etc/grid-security/certificates -L -X COPY -H 'Credentials: none' -H \"Authorization: Bearer ${AT}\" -H \"TransferHeaderAuthorization: Bearer ${AT}\" -H \"Destination: https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file3\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1/file1 # Delete $ curl --capath /etc/grid-security/certificates -L -X DELETE -H \"Authorization: Bearer ${AT}\" https://golias100.farm.particle.cz/dpm/farm.particle.cz/home/wlcg/dir1 Gfal python API can be also used with tokens, e.g. import os import gfal2 ctx = gfal2.creat_context() cred = gfal2.cred_new(\"BEARER\", os.getenv('TOKEN')) gfal2.cred_set(ctx, 'amnesiac.cloud.cnaf.infn.it', cred) ctx.stat('https://amnesiac.cloud.cnaf.infn.it:8443/wlcg/wlcgdoma/https/jwttest/1M')","title":"Scope-based authorization"},{"location":"token-based-authorization/#group-based-authorization","text":"TBD","title":"Group-based authorization"},{"location":"token-based-authorization/compliance/","text":"WLCG JWT compliance WLCG JWT compliance test suite runs every day at 13 UTC in CI on GH actions . Test results are published on amnesiac (requires WLCG auth).","title":"WLCG JWT compliance"},{"location":"token-based-authorization/compliance/#wlcg-jwt-compliance","text":"WLCG JWT compliance test suite runs every day at 13 UTC in CI on GH actions . Test results are published on amnesiac (requires WLCG auth).","title":"WLCG JWT compliance"},{"location":"token-based-authorization/doma-testbed/","text":"DOMA Token-based AuthZ Testbed Endpoints IAM WLCG IAM XDC IAM CMS IAM RUCIO Install Rucio client with one method described in documentation , e.g. # python2 rucio client virtualenv rucio source rucio/bin/activate pip install 'pyrsistent>=0.14.0,<=0.17.0' # newer versin requires python3 pip install 'rucio-clients<1.23.0' # latest rucio client works only with python3 virtualenv-3 rucio source rucio/bin/activate pip3 install rucio-clients pip3 install gfal2-python and save following configuration file in rucio/etc/rucio.cfg for WLCG DOMA Rucio OIDC tests [client] rucio_host = https://rucio-doma.cern.ch:443 auth_host = https://rucio-doma-auth.cern.ch:443 auth_type = oidc account = wlcg_doma oidc_issuer = wlcg ca_cert = /etc/grid-security/certificates #ca_cert = /etc/pki/tls/certs/CERN-bundle.pem Setup environment for Rucio client installed in virtualenv source rucio/bin/activate or if you use different installation method just set RUCIO_HOME environment variable to the base directory with etc/rucio.cfg file export RUCIO_HOME=/base/path/to/rucio WLCG IAM account is necessary to access WLCG DOMA Rucio instance and user sub claim (WLCG IAM uuid identity) must be associated with wlcg_doma Rucio account by DOMA Rucio ADMIN. It is also possible to associate user certificate subject with wlcg_doma Rucio account to provide access with WLCG VO X.509 certificate proxy, but for different authorization type it is necessary to update auth_type = x509_proxy in rucio.cfg or setting environment variable RUCIO_AUTH_TYPE=x509_proxy . FTS CERN Devel FTS with 3.10.x provides JWT support for WLCG and XDC. fts-rest-whoami --access-token=<token> -s https://fts3-devel.cern.ch:8446 fts-rest-transfer-submit --access-token=<token> -s https://fts3-devel.cern.ch:8446 <src_url> <dst_url> fts-rest-transfer-status --access-token=<token> -s https://fts3-devel.cern.ch:8446 Be aware that for sucessfull FTS transfer submission with OIDC you also need recent 3.10.x FTS rest client. Storage dCache ( transfer documentation ) Prometheus dev endpoint DPM PRAGUE production endpoint Manchester testbed endpoint Echo (CEPH) RAL dev endpoint (wlcg VO not yet supported?) EOS CERN dev endpoint CERN ATLAS production endpoint (only for ATLAS members) StoRM ( configuration instructions ) CNAF production endpoint CNAF dev endpoint XRootD Nebraska dev endpoint Monitoring Functional Tests with WLCG OIDC Rucio DOMA Configuration Rucio DOMA Logs CERN FTS3 Devel FTS Grafana","title":"DOMA Token-based AuthZ Testbed"},{"location":"token-based-authorization/doma-testbed/#doma-token-based-authz-testbed","text":"","title":"DOMA Token-based AuthZ Testbed"},{"location":"token-based-authorization/doma-testbed/#endpoints","text":"","title":"Endpoints"},{"location":"token-based-authorization/doma-testbed/#iam","text":"WLCG IAM XDC IAM CMS IAM","title":"IAM"},{"location":"token-based-authorization/doma-testbed/#rucio","text":"Install Rucio client with one method described in documentation , e.g. # python2 rucio client virtualenv rucio source rucio/bin/activate pip install 'pyrsistent>=0.14.0,<=0.17.0' # newer versin requires python3 pip install 'rucio-clients<1.23.0' # latest rucio client works only with python3 virtualenv-3 rucio source rucio/bin/activate pip3 install rucio-clients pip3 install gfal2-python and save following configuration file in rucio/etc/rucio.cfg for WLCG DOMA Rucio OIDC tests [client] rucio_host = https://rucio-doma.cern.ch:443 auth_host = https://rucio-doma-auth.cern.ch:443 auth_type = oidc account = wlcg_doma oidc_issuer = wlcg ca_cert = /etc/grid-security/certificates #ca_cert = /etc/pki/tls/certs/CERN-bundle.pem Setup environment for Rucio client installed in virtualenv source rucio/bin/activate or if you use different installation method just set RUCIO_HOME environment variable to the base directory with etc/rucio.cfg file export RUCIO_HOME=/base/path/to/rucio WLCG IAM account is necessary to access WLCG DOMA Rucio instance and user sub claim (WLCG IAM uuid identity) must be associated with wlcg_doma Rucio account by DOMA Rucio ADMIN. It is also possible to associate user certificate subject with wlcg_doma Rucio account to provide access with WLCG VO X.509 certificate proxy, but for different authorization type it is necessary to update auth_type = x509_proxy in rucio.cfg or setting environment variable RUCIO_AUTH_TYPE=x509_proxy .","title":"RUCIO"},{"location":"token-based-authorization/doma-testbed/#fts","text":"CERN Devel FTS with 3.10.x provides JWT support for WLCG and XDC. fts-rest-whoami --access-token=<token> -s https://fts3-devel.cern.ch:8446 fts-rest-transfer-submit --access-token=<token> -s https://fts3-devel.cern.ch:8446 <src_url> <dst_url> fts-rest-transfer-status --access-token=<token> -s https://fts3-devel.cern.ch:8446 Be aware that for sucessfull FTS transfer submission with OIDC you also need recent 3.10.x FTS rest client.","title":"FTS"},{"location":"token-based-authorization/doma-testbed/#storage","text":"","title":"Storage"},{"location":"token-based-authorization/doma-testbed/#dcache-transfer-documentation","text":"Prometheus dev endpoint","title":"dCache (transfer documentation)"},{"location":"token-based-authorization/doma-testbed/#dpm","text":"PRAGUE production endpoint Manchester testbed endpoint","title":"DPM"},{"location":"token-based-authorization/doma-testbed/#echo-ceph","text":"RAL dev endpoint (wlcg VO not yet supported?)","title":"Echo (CEPH)"},{"location":"token-based-authorization/doma-testbed/#eos","text":"CERN dev endpoint CERN ATLAS production endpoint (only for ATLAS members)","title":"EOS"},{"location":"token-based-authorization/doma-testbed/#storm-configuration-instructions","text":"CNAF production endpoint CNAF dev endpoint","title":"StoRM (configuration instructions)"},{"location":"token-based-authorization/doma-testbed/#xrootd","text":"Nebraska dev endpoint","title":"XRootD"},{"location":"token-based-authorization/doma-testbed/#monitoring","text":"Functional Tests with WLCG OIDC Rucio DOMA Configuration Rucio DOMA Logs CERN FTS3 Devel FTS Grafana","title":"Monitoring"},{"location":"token-based-authorization/issues/","text":"Known issues oidc-agent not available in EPEL repository Scitokens storage.modify scope is not honoured by scitokens-cpp : Small, but breaking issue since the scitokens library honours the storage.write instead of the storage.modify scope. Breaks WLCG JWT profile compatibility for any software that relies on the library. XRootD StoRM StoRM WebDAV should drop Authorization header in TPC redirects : this is solved and coming with the next StoRM release scheduled for the beginning of July; StoRM WebDAV leaks file descriptors when Conscrypt is enabled : This is fixed in the code; a workaround to avoid this issue is disabling Conscrypt. This can be done by setting the following variables in /etc/sysconfig/storm-webdav : STORM_WEBDAV_USE_CONSCRYPT=\"false\" STORM_WEBDAV_TPC_USE_CONSCRYPT=\"false\" STORM_WEBDAV_ENABLE_HTTP2=\"false\" dCache DPM allows HEAD requests with just storage.create:/ (mapping internally capabilities to simple ro/rw activity) supports storage.write scope which is not defined in WLCG JWT profile insecure token identity mapping to local uid (only \"sub\" claim considered while only \"sub\"+\"iss\" guaranteed to be unique) EOS RUCIO token with rucio audience used for FTS file transfers (changed to https://wlcg.cern.ch/jwt/v1/any for Rucio DOMA instnace) default scope set to openid profile wich is not sufficient e.g. for rucio upload or rucio download fails in case there is expired X.509 proxy in /tmp/x509up_u$(id -u) although auth_type is set to oidc use non-standard location for access token /tmp/$(id -u -n)/.rucio_${RUCIO_ACCOUNT}/auth_token_${RUCIO_ACCOUNT} CLI OIDC arguments differs from FTS REST client FTS Gfal tokens can't be passed to gfal-utils CLI tools unable to determine which audience and scope storage.*:/path should be in used for SRM+HTTP transfers (TURL returned by SRM srmPrepareToGet + srmPrepareToPut not known before calling copy function) TPC transfers with StoRM active party fails with gfal2 KEEP_ALIVE=True configuration and davs:// protocol (can be reproduced also by 2x ctx.stat('davs://storm:8443/non-existing-file') using gfal python API)","title":"Known issues"},{"location":"token-based-authorization/issues/#known-issues","text":"","title":"Known issues"},{"location":"token-based-authorization/issues/#oidc-agent","text":"not available in EPEL repository","title":"oidc-agent"},{"location":"token-based-authorization/issues/#scitokens","text":"storage.modify scope is not honoured by scitokens-cpp : Small, but breaking issue since the scitokens library honours the storage.write instead of the storage.modify scope. Breaks WLCG JWT profile compatibility for any software that relies on the library.","title":"Scitokens"},{"location":"token-based-authorization/issues/#xrootd","text":"","title":"XRootD"},{"location":"token-based-authorization/issues/#storm","text":"StoRM WebDAV should drop Authorization header in TPC redirects : this is solved and coming with the next StoRM release scheduled for the beginning of July; StoRM WebDAV leaks file descriptors when Conscrypt is enabled : This is fixed in the code; a workaround to avoid this issue is disabling Conscrypt. This can be done by setting the following variables in /etc/sysconfig/storm-webdav : STORM_WEBDAV_USE_CONSCRYPT=\"false\" STORM_WEBDAV_TPC_USE_CONSCRYPT=\"false\" STORM_WEBDAV_ENABLE_HTTP2=\"false\"","title":"StoRM"},{"location":"token-based-authorization/issues/#dcache","text":"","title":"dCache"},{"location":"token-based-authorization/issues/#dpm","text":"allows HEAD requests with just storage.create:/ (mapping internally capabilities to simple ro/rw activity) supports storage.write scope which is not defined in WLCG JWT profile insecure token identity mapping to local uid (only \"sub\" claim considered while only \"sub\"+\"iss\" guaranteed to be unique)","title":"DPM"},{"location":"token-based-authorization/issues/#eos","text":"","title":"EOS"},{"location":"token-based-authorization/issues/#rucio","text":"token with rucio audience used for FTS file transfers (changed to https://wlcg.cern.ch/jwt/v1/any for Rucio DOMA instnace) default scope set to openid profile wich is not sufficient e.g. for rucio upload or rucio download fails in case there is expired X.509 proxy in /tmp/x509up_u$(id -u) although auth_type is set to oidc use non-standard location for access token /tmp/$(id -u -n)/.rucio_${RUCIO_ACCOUNT}/auth_token_${RUCIO_ACCOUNT} CLI OIDC arguments differs from FTS REST client","title":"RUCIO"},{"location":"token-based-authorization/issues/#fts","text":"","title":"FTS"},{"location":"token-based-authorization/issues/#gfal","text":"tokens can't be passed to gfal-utils CLI tools unable to determine which audience and scope storage.*:/path should be in used for SRM+HTTP transfers (TURL returned by SRM srmPrepareToGet + srmPrepareToPut not known before calling copy function) TPC transfers with StoRM active party fails with gfal2 KEEP_ALIVE=True configuration and davs:// protocol (can be reproduced also by 2x ctx.stat('davs://storm:8443/non-existing-file') using gfal python API)","title":"Gfal"},{"location":"token-based-authorization/oidc-agent/","text":"OIDC Agent oidc-agent is a set of tools to get and manage OpenID Connect tokens and make them easily usable from the command line. It follows the ssh-agent design, so users can handle OIDC tokens in a similar way as they do with ssh keys. Installation instructions Quick CENTOS7 installation recipe Current releases are available at GitHub This recipe shows how to quickly install oidc-agent on CENTOS 7. $ VERSION=$(curl --silent \"https://api.github.com/repos/indigo-dc/oidc-agent/releases/latest\" | grep -Po '\"tag_name\": \"v\\K.*?(?=\")') '\"tag_name\": \"v\\K.*?(?=\")' $ yum -y install epel-release $ yum -y install https://github.com/indigo-dc/oidc-agent/releases/download/v$VERSION/oidc-agent-$VERSION-1.el7.x86_64.rpm Bootstrapping oidc-agent The first thing to do is to start oidc-agent. This can be done issuing the following command: $ eval $(oidc-agent) Agent pid 62088 To install OIDC Agent from source or in a Debian/Ubuntu distro, please refer to oidc-agent instalation documentation How to register a client In order to obtain a token out of IAM, a user needs a client registered. oidc-agent can automate this step and store client credentials securely on the user machine. A new client can be registered using the oidc-gen command, as follows: $ oidc-gen -w device wlcg The -w device instructs oidc-agent to use the device code flow for the authentication, which is the recommended way with IAM. oidc-agent will display a list of different providers that can be used for registration: [1] https://iam-test.indigo-datacloud.eu/ [2] https://iam.deep-hybrid-datacloud.eu/ ... [16] https://wlcg.cloud.cnaf.infn.it/ Issuer [https://wlcg.cloud.cnaf.infn.it/]:_ Select one of the registered providers, or type a custom issuer (for IAM, the last character of the issuer string is always a /, e.g. https://wlcg.cloud.cnaf.infn.it/). Then oidc-agent asks for the scopes, typing max (without quotes) allows to get all the allowed scopes, or, one or more can be defined using spaces between them. oidc-agent will register a new client and store the client credentials and a refresh token locally in encrypted form (the agent will ask for a password from the user). How to print a list of all configured account To obtain a list of all configured accounts configured, either oidc-gen --accounts or oidc-add --list can be used. Both of them can use the same flag -l $ oidc-gen -l The following account configurations are usable: wlcg How to print a client description Printing the full client decrypted content can be done by passing the account shortname or the absolute filepath of the account, with oidc-gen --print or simply the -p flag $ oidc-gen -p wlcg Enter decryption password for account config 'wlcg': { \"name\": \"wlcg\", \"client_name\": \"oidc-agent:wlcg\", \"issuer_url\": \"https://wlcg.cloud.cnaf.infn.it/\", \"device_authorization_endpoint\": \"https://wlcg.cloud.cnaf.infn.it/devicecode\", \"daeSetByUser\": 0, \"client_id\": \"f062c71e-920d-4b64-8282-a24d4101d8fc\", \"client_secret\": \"xxxxxxxxxxxxxxxx\", \"refresh_token\": \"xxxxxxxxxxxxxxxx\", \"cert_path\": \"\", \"scope\": \"address openid profile storage.read:/ wlcg eduperson_entitlement storage.create:/ phone offline_access eduperson_scoped_affiliation storage.modify:/ email wlcg.groups\", \"audience\": \"\", \"redirect_uris\": [\"edu.kit.data.oidc-agent:/redirect\", \"http://localhost:8080\", \"http://localhost:4242\", \"http://localhost:10088\"], \"username\": \"\", \"password\": \"\", \"client_id_issued_at\": 1592322007, \"registration_access_token\": \"xxxxxxxxxxxxxx\", \"registration_client_uri\": \"xxxxxxxxxxxxxx\", \"token_endpoint_auth_method\": \"client_secret_basic\", \"grant_types\": [\"urn:ietf:params:oauth:grant-type:device_code\", \"refresh_token\"], \"response_types\": [\"token\"], \"application_type\": \"web\", \"cert_path\": \"\", \"audience\": \"\" } How to get a token from oidc-agent Tokens can be obtained using the oidc-token command, as follows: oidc-token wlcg This will request a token with all the scopes requested at client registration time. Limiting issued scopes To limit the scopes included in the token, the -s flag can be used, as follows: oidc-token -s storage.read:/ wlcg In this example the scopes is being limited to storage.read:/ Limiting token audience The token audience can be limited using the --aud flag, oidc-token --aud example.audience -s storage.read:/ wlcg In this example the audience is being defined as example.audience For more usage options please refer to oidc-agent --help or to oidc-agent usage documentation","title":"OIDC Agent"},{"location":"token-based-authorization/oidc-agent/#oidc-agent","text":"oidc-agent is a set of tools to get and manage OpenID Connect tokens and make them easily usable from the command line. It follows the ssh-agent design, so users can handle OIDC tokens in a similar way as they do with ssh keys.","title":"OIDC Agent"},{"location":"token-based-authorization/oidc-agent/#installation-instructions","text":"","title":"Installation instructions"},{"location":"token-based-authorization/oidc-agent/#quick-centos7-installation-recipe","text":"Current releases are available at GitHub This recipe shows how to quickly install oidc-agent on CENTOS 7. $ VERSION=$(curl --silent \"https://api.github.com/repos/indigo-dc/oidc-agent/releases/latest\" | grep -Po '\"tag_name\": \"v\\K.*?(?=\")') '\"tag_name\": \"v\\K.*?(?=\")' $ yum -y install epel-release $ yum -y install https://github.com/indigo-dc/oidc-agent/releases/download/v$VERSION/oidc-agent-$VERSION-1.el7.x86_64.rpm","title":"Quick CENTOS7 installation recipe"},{"location":"token-based-authorization/oidc-agent/#bootstrapping-oidc-agent","text":"The first thing to do is to start oidc-agent. This can be done issuing the following command: $ eval $(oidc-agent) Agent pid 62088 To install OIDC Agent from source or in a Debian/Ubuntu distro, please refer to oidc-agent instalation documentation","title":"Bootstrapping oidc-agent"},{"location":"token-based-authorization/oidc-agent/#how-to-register-a-client","text":"In order to obtain a token out of IAM, a user needs a client registered. oidc-agent can automate this step and store client credentials securely on the user machine. A new client can be registered using the oidc-gen command, as follows: $ oidc-gen -w device wlcg The -w device instructs oidc-agent to use the device code flow for the authentication, which is the recommended way with IAM. oidc-agent will display a list of different providers that can be used for registration: [1] https://iam-test.indigo-datacloud.eu/ [2] https://iam.deep-hybrid-datacloud.eu/ ... [16] https://wlcg.cloud.cnaf.infn.it/ Issuer [https://wlcg.cloud.cnaf.infn.it/]:_ Select one of the registered providers, or type a custom issuer (for IAM, the last character of the issuer string is always a /, e.g. https://wlcg.cloud.cnaf.infn.it/). Then oidc-agent asks for the scopes, typing max (without quotes) allows to get all the allowed scopes, or, one or more can be defined using spaces between them. oidc-agent will register a new client and store the client credentials and a refresh token locally in encrypted form (the agent will ask for a password from the user).","title":"How to register a client"},{"location":"token-based-authorization/oidc-agent/#how-to-print-a-list-of-all-configured-account","text":"To obtain a list of all configured accounts configured, either oidc-gen --accounts or oidc-add --list can be used. Both of them can use the same flag -l $ oidc-gen -l The following account configurations are usable: wlcg","title":"How to print a list of all configured account"},{"location":"token-based-authorization/oidc-agent/#how-to-print-a-client-description","text":"Printing the full client decrypted content can be done by passing the account shortname or the absolute filepath of the account, with oidc-gen --print or simply the -p flag $ oidc-gen -p wlcg Enter decryption password for account config 'wlcg': { \"name\": \"wlcg\", \"client_name\": \"oidc-agent:wlcg\", \"issuer_url\": \"https://wlcg.cloud.cnaf.infn.it/\", \"device_authorization_endpoint\": \"https://wlcg.cloud.cnaf.infn.it/devicecode\", \"daeSetByUser\": 0, \"client_id\": \"f062c71e-920d-4b64-8282-a24d4101d8fc\", \"client_secret\": \"xxxxxxxxxxxxxxxx\", \"refresh_token\": \"xxxxxxxxxxxxxxxx\", \"cert_path\": \"\", \"scope\": \"address openid profile storage.read:/ wlcg eduperson_entitlement storage.create:/ phone offline_access eduperson_scoped_affiliation storage.modify:/ email wlcg.groups\", \"audience\": \"\", \"redirect_uris\": [\"edu.kit.data.oidc-agent:/redirect\", \"http://localhost:8080\", \"http://localhost:4242\", \"http://localhost:10088\"], \"username\": \"\", \"password\": \"\", \"client_id_issued_at\": 1592322007, \"registration_access_token\": \"xxxxxxxxxxxxxx\", \"registration_client_uri\": \"xxxxxxxxxxxxxx\", \"token_endpoint_auth_method\": \"client_secret_basic\", \"grant_types\": [\"urn:ietf:params:oauth:grant-type:device_code\", \"refresh_token\"], \"response_types\": [\"token\"], \"application_type\": \"web\", \"cert_path\": \"\", \"audience\": \"\" }","title":"How to print a client description"},{"location":"token-based-authorization/oidc-agent/#how-to-get-a-token-from-oidc-agent","text":"Tokens can be obtained using the oidc-token command, as follows: oidc-token wlcg This will request a token with all the scopes requested at client registration time.","title":"How to get a token from oidc-agent"},{"location":"token-based-authorization/oidc-agent/#limiting-issued-scopes","text":"To limit the scopes included in the token, the -s flag can be used, as follows: oidc-token -s storage.read:/ wlcg In this example the scopes is being limited to storage.read:/","title":"Limiting issued scopes"},{"location":"token-based-authorization/oidc-agent/#limiting-token-audience","text":"The token audience can be limited using the --aud flag, oidc-token --aud example.audience -s storage.read:/ wlcg In this example the audience is being defined as example.audience For more usage options please refer to oidc-agent --help or to oidc-agent usage documentation","title":"Limiting token audience"},{"location":"token-based-authorization/configuration/dcache/","text":"dCache Token configuratoin is well described in official documentation","title":"dCache"},{"location":"token-based-authorization/configuration/dcache/#dcache","text":"Token configuratoin is well described in official documentation","title":"dCache"},{"location":"token-based-authorization/configuration/dpm/","text":"DPM Currently supports only very basic configuration described in documentation","title":"DPM"},{"location":"token-based-authorization/configuration/dpm/#dpm","text":"Currently supports only very basic configuration described in documentation","title":"DPM"},{"location":"token-based-authorization/configuration/storm/","text":"StoRM Token-based authentication and authorization is supported by the latest StoRM WebDAV release. Enabling token-based authN/Z for the WLCG IAM instance In order to enable token-based AuthN/Z for the WLCG IAM instance on a StoRM WebDAV deployment, you need to: Add the WLCG issuer to the list of the trusted issuers by the StoRM WebDAV instance. This is done by modifying the /etc/storm/webdav/config/application.yml as follows: oauth: issuers: - name: iam-wlcg issuer: https://wlcg.cloud.cnaf.infn.it/ Enable the issuer for wlcg the storage area, by changing the wlcg storage area configuration /etc/storm/webdav/sa.d/wlcg.properties like in the following example: name=wlcg rootPath=/your/storage/path/ accessPoints=/wlcg vos=wlcg orgs=https://wlcg.cloud.cnaf.infn.it/ authenticatedReadEnabled=false anonymousReadEnabled=false This configuration enables flat authorization access on the storage to members of the WLCG VO, i.e. all users will have read and write access to the data. HTTP TPC support configuration To configure support for HTTP TPC, follow the instructions in the StoRM WebDAV documentation .","title":"StoRM"},{"location":"token-based-authorization/configuration/storm/#storm","text":"Token-based authentication and authorization is supported by the latest StoRM WebDAV release.","title":"StoRM"},{"location":"token-based-authorization/configuration/storm/#enabling-token-based-authnz-for-the-wlcg-iam-instance","text":"In order to enable token-based AuthN/Z for the WLCG IAM instance on a StoRM WebDAV deployment, you need to: Add the WLCG issuer to the list of the trusted issuers by the StoRM WebDAV instance. This is done by modifying the /etc/storm/webdav/config/application.yml as follows: oauth: issuers: - name: iam-wlcg issuer: https://wlcg.cloud.cnaf.infn.it/ Enable the issuer for wlcg the storage area, by changing the wlcg storage area configuration /etc/storm/webdav/sa.d/wlcg.properties like in the following example: name=wlcg rootPath=/your/storage/path/ accessPoints=/wlcg vos=wlcg orgs=https://wlcg.cloud.cnaf.infn.it/ authenticatedReadEnabled=false anonymousReadEnabled=false This configuration enables flat authorization access on the storage to members of the WLCG VO, i.e. all users will have read and write access to the data.","title":"Enabling token-based authN/Z for the WLCG IAM instance"},{"location":"token-based-authorization/configuration/storm/#http-tpc-support-configuration","text":"To configure support for HTTP TPC, follow the instructions in the StoRM WebDAV documentation .","title":"HTTP TPC support configuration"},{"location":"token-based-authorization/configuration/xrootd/","text":"XRootD Token-based authentication and authorization is supported by XRootD in combination with the xrootd-scitokens plugin. Enabling token-based authN/Z for the WLCG IAM instance In order to enable token-based AuthN/Z for the WLCG IAM instance on an XRootD deployment, you need to: Install the xrootd-scitokens plugin. This is for example part of the upstream XRootD yum repository. Add the WLCG issuer to the list of the trusted issuers by the SciTokens library. This can be done by creating a configuration file e.g. at /etc/xrootd/scitokens.cfg with the following content (assuming xrootd should act as the xrootd user): [Global] onmissing = passthrough [Issuer WLCG IAM] issuer = https://wlcg.cloud.cnaf.infn.it/ base_path = / map_subject = false default_user = xrootd Note that the onmissing = passthrough part is needed to continue with other authorization libraries, such as the Macaroons library, and to continue with the evaluation of an authdb file (if used). Extend your existing xrootd configuration file. To stack with the macaroons authentication library, you will need: ofs.authlib ++ libXrdAccSciTokens.so config=/etc/xrootd/scitokens.cfg ofs.authlib ++ libXrdMacaroons.so ofs.authorize 1 # Pass the bearer token to the Xrootd authorization framework. http.header2cgi Authorization authz The ++ is needed for stacking of the authorization libraries. If this is not needed, i.e. you only use one library, the ++ can be dropped. In case an acc.authdb file is used, authorization can be granted as follows, granting full read-write access to the /data/grid/wlcg path and read-only and list access to /data/grid/srr : = wlcgtknusr o: https://wlcg.cloud.cnaf.infn.it/ g: /wlcg x wlcgtknusr /data/grid/wlcg a /data/grid/srr lr This configuration enables flat authorization access on the storage to members of the WLCG VO with the /wlcg group,, i.e. all users will have read and write access to the data at /data/grid/wlcg .","title":"XRootD"},{"location":"token-based-authorization/configuration/xrootd/#xrootd","text":"Token-based authentication and authorization is supported by XRootD in combination with the xrootd-scitokens plugin.","title":"XRootD"},{"location":"token-based-authorization/configuration/xrootd/#enabling-token-based-authnz-for-the-wlcg-iam-instance","text":"In order to enable token-based AuthN/Z for the WLCG IAM instance on an XRootD deployment, you need to: Install the xrootd-scitokens plugin. This is for example part of the upstream XRootD yum repository. Add the WLCG issuer to the list of the trusted issuers by the SciTokens library. This can be done by creating a configuration file e.g. at /etc/xrootd/scitokens.cfg with the following content (assuming xrootd should act as the xrootd user): [Global] onmissing = passthrough [Issuer WLCG IAM] issuer = https://wlcg.cloud.cnaf.infn.it/ base_path = / map_subject = false default_user = xrootd Note that the onmissing = passthrough part is needed to continue with other authorization libraries, such as the Macaroons library, and to continue with the evaluation of an authdb file (if used). Extend your existing xrootd configuration file. To stack with the macaroons authentication library, you will need: ofs.authlib ++ libXrdAccSciTokens.so config=/etc/xrootd/scitokens.cfg ofs.authlib ++ libXrdMacaroons.so ofs.authorize 1 # Pass the bearer token to the Xrootd authorization framework. http.header2cgi Authorization authz The ++ is needed for stacking of the authorization libraries. If this is not needed, i.e. you only use one library, the ++ can be dropped. In case an acc.authdb file is used, authorization can be granted as follows, granting full read-write access to the /data/grid/wlcg path and read-only and list access to /data/grid/srr : = wlcgtknusr o: https://wlcg.cloud.cnaf.infn.it/ g: /wlcg x wlcgtknusr /data/grid/wlcg a /data/grid/srr lr This configuration enables flat authorization access on the storage to members of the WLCG VO with the /wlcg group,, i.e. all users will have read and write access to the data at /data/grid/wlcg .","title":"Enabling token-based authN/Z for the WLCG IAM instance"}]}